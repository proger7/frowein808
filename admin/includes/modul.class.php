<?php
   class modul { protected $db; protected $time; protected $lang; protected $base_url; protected $base_root; protected $ftp; protected $permission; protected $permissions; protected $config; public $table; private $name; private $path; public $extraButtons; function __construct(){ $this->init(); } protected function init(){ $this->db = $_SESSION["_registry"]["db"]; $this->lang = $_SESSION["_registry"]["lang"]["backend"]; $this->time = $_SESSION["_registry"]["time"]; $this->base_url = $_SESSION["_registry"]["system_config"]["site"]["base_url"]; $this->base_root = $_SESSION["_registry"]["root"]."/"; $this->permissions = new permissions(); try { $this->ftp = FTP::getInstance(); $this->ftp->connect($_SESSION["_registry"]["ftp_config"]["self"], false, true ); } catch (FTPException $error) {echo $error->getMessage();} }  public function listTable($fields,$filters=FALSE,$buttons=FALSE,$extraButtons = FALSE, $table = FALSE){ $_SESSION["_registry"]["variables"]["backlink"] = "http://".$_SERVER["HTTP_HOST"].$_SERVER["REQUEST_URI"]; $this->extraButtons = $extraButtons; $req_table = $this->getTable($fields,$filters,$table); $html = ' <p class="headline">'.$this->lang["module"]["available_entitys"].'</p><form action="?edit=none" method="post">'; if ($this->permissions->hasPermission($this->permission.".edit") || $_SESSION["_registry"]["section"] == "frontend") $html .= '<input type="submit" src="'.$this->base_url.'admin/img/button_new_de.png" class="head_buttons button" value="Neuer Eintrag" />'; $html .= '</form>'; if ($this->permissions->hasPermission($this->permission.".del") || $_SESSION["_registry"]["section"] == "frontend") $html .= '<input type="submit" src="'.$this->base_url.'admin/img/button_delete_mass_de.png" name="delete_mass" id="delete_mass" class="head_buttons button" value="markierte Einträge löschen" /><script type="text/javascript"> $("#delete_mass").click(function() { delete_mass(\''.$this->table.'\'); }); </script>'; $html .= '<input type="submit" src="'.$this->base_url.'admin/img/button_reload_de.png" name="reload" onClick="location.reload();" class="head_buttons button" value="Aktualisieren" /> '; if (isset($this->extraButtons["Lang"])){ if (isset($_GET["lang"]) && $_GET["lang"] != "") $lang = $_GET["lang"]; else $lang = 1; if ($lang == 1){ $html .= '<a href="?lang=2" ><img style="margin-bottom:-10px;" src="'.$this->base_url.'admin/img/langswitcher_de.png" style="cursor:pointer;"></a>'; } else if ($lang == 2){ $html .= '<a href="?lang=1" ><img style="margin-bottom:-10px;" src="'.$this->base_url.'admin/img/langswitcher_en.png" style="cursor:pointer;"></a>'; } } $html .= ' <table id="tableListing" cellspacing="0" cellpadding="0"><thead><tr><th style="width:15px;"></th>'; if ($fields){ $first = TRUE; foreach($fields as $field){ $html .= ' <th'; if ($field[0] == "Status" || $field[0] == "Status3")$html .= ' style="width:25px; text-align:center;" '; $html .= '>'.$field[1].'</th>'; } $i = count($buttons) - 1; $html .= '<th style="width:'.(count($buttons) * 23).'px;"></th>'; $html .= '</tr></thead><tbody>'; $i = 1; foreach ($req_table as $row){ $html .= ' <tr><td><input type="checkbox" name="marked[]" value="'.$row["id"].'" /></td>'; foreach ($fields as $field){ if ($field[0] != "Input") { $call = "getField"."_".$field[0]; $fieldData = $this->$call($field,$row); } else $fieldData = $row[$field[2]]; $html .= ' <td'; if ($field[0] == "Status" || $field[0] == "Status3") $html .=' style="text-align:center;"'; else $html .=' style="padding-left:10px;"'; $html.='>'.$fieldData.'</td>'; } if (is_array($buttons)){ $buttons_html= ''; foreach ($buttons as $button){ $call = "getButton"."_".$button; $fieldData = $this->$call($row); if ($fieldData) $buttons_html .= $fieldData.'&nbsp;'; } $html .= '<td class="action_buttons">'.$buttons_html.'</td>'; } $html .= ' </tr>'; $i++; } } $html .= ' </tbody></table><script type="text/javascript" charset="utf-8"> $(document).ready(function() { $("#tableListing").dataTable({ "oLanguage": {"sUrl": URL_ROOT + "admin/js/datatables/dataTables.german.txt"}, "sPaginationType": "full_numbers", "aoColumns": [ { "bSortable": false }, '; for($i = 1; $i <= count($fields); $i++){ $html .= "null, "; } $html .= ' { "bSortable": false } ] } ); } ); </script> '; return $html; }  public function getTable($fields=FALSE,$filters=FALSE, $table = FALSE){ if (!$table) $table = $this->table; $query = "SELECT id"; if ($fields){ foreach($fields as $field){ if ($field[0] == "DateRange") $query .= ', `'.$field[2].'`, `'.$field[3].'`'; else if ($field[0] == "BoolSelectRelation") $query .= ''; else $query .= ', `'.$field[2].'`'; } } if($this->db->is_field('order', $this->table))$query .= ', `order`'; $query .= " FROM ".$table; if ($filters || $search || $lang) $query .=" WHERE "; if ($filters){ $query .= " ("; $first = TRUE; foreach ($filters as $filter){ if (!$first) $query .= " AND "; $query .= "`".$filter["0"]."`".$filter["1"]."'".$filter["2"]."'"; $first = FALSE; } $query .= " )"; } if ($lang){ if ($filters || $search) $query .=" AND "; $query .= " `language_id`=$lang"; } $query .= ' ;'; return $this->db->select($query); }  protected function getField_DateTime($field,$row){ if (!isset($field[3])) $format = FALSE; else $format = $field[3]; return $this->time->convertDateTime($row[$field[2]],$format); }  protected function getField_Date($field,$row){ if (!isset($field[3])) $format = FALSE; else $format = $field[3]; if ($row[$field[2]] != "0000-00-00") return $this->time->convertDate($row[$field[2]],$format); } protected function getField_DateRange($field,$row){ if (!isset($field[4])) $format = FALSE; else $format = $field[4]; if ($row[$field[2]] != "0000-00-00") $from = $this->time->convertDate($row[$field[2]],$format); if ($row[$field[3]] != "0000-00-00") $till = $this->time->convertDate($row[$field[3]],$format); return $from.' - '. $till; }  protected function getField_Time($field,$row){ if (!isset($field[3])) $format = FALSE; else $format = $field[3]; return $this->time->convertTime($row[$field[2]],$format); }  protected function getField_Table($field,$row){ if (!isset($field[3]) || !isset($field[4]) || !isset($field[5])) return '<p style="color:red;">FIELD-ERROR</p>'; else { return $this->db->query_fetch_single("SELECT $field[3] FROM $field[4] WHERE $field[5] = '".$row[$field[2]]."' LIMIT 1;"); } }  protected function getField_TableFilter($field,$row){ if (!isset($field[3]) || !isset($field[4]) || !isset($field[5])) return '<p style="color:red;">FIELD-ERROR</p>'; else { return $this->db->query_fetch_single("SELECT $field[3] FROM $field[4] WHERE $field[5] = '".$row[$field[2]]."' AND $field[6] LIMIT 1;"); } }  protected function getField_Status($field,$row){ $status = '<img src="'.$this->base_url.'admin/img/'; switch ($row[$field[2]]){ case 0: $status .= 'kugel_rot.gif" alt="'.$this->lang["inactive"].'"'; break; case 1: $status .= 'kugel_gruen.gif" alt="'.$this->lang["active"].'"'; break; } $status.= ' />'; return $status; }  protected function getField_Status3($field,$row){ $status = '<img src="'.$this->base_url.'admin/img/'; switch ($row[$field[2]]){ case "": $status .= 'kugel_gelb.gif" alt="'.$this->lang["wait"].'"'; break; case 2: $status .= 'kugel_gelb.gif" alt="'.$this->lang["wait"].'"'; break; case 1: $status .= 'kugel_gruen.gif" alt="'.$this->lang["active"].'"'; break; case 0: $status .= 'kugel_rot.gif" alt="'.$this->lang["inactive"].'"'; break; } $status.= ' />'; return $status; } protected function getField_Lang($field,$row){ switch ($row[$field[2]]){ case 1: $status .= 'deutsch'; break; case 2: $status .= 'englisch'; break; } return $status; } protected function getButton_Edit($row){ if (!$this->permissions->hasPermission($this->permission.".read") && $_SESSION["_registry"]["section"] != "frontend") return false; $button = '<a href="?edit='.$row["id"].'"><img src="'.$this->base_url.'admin/img/button_edit.png" title="Bearbeiten" /></a>'; return $button; } protected function getButton_Order($row){ if (!$this->permissions->hasPermission($this->permission.".read") && $_SESSION["_registry"]["section"] != "frontend") return false; $button = ' <img style="cursor:pointer;" src="'.$this->base_url.'admin/img/pfeil_up.png" title="nach oben" onclick="ajax_action(\'change_order\',\''.$this->table.'\','.$row["id"].','.($row["order"] - 1).')" /><img style="cursor:pointer;" src="'.$this->base_url.'admin/img/pfeil_down.png" title="nach unten" onclick="ajax_action(\'change_order\',\''.$this->table.'\','.$row["id"].','.($row["order"] + 1).')" />'; return $button; } protected function getButton_OrderParent($row){ if (!$this->permissions->hasPermission($this->permission.".read")) return false; $button = ' <img style="cursor:pointer;" src="'.$this->base_url.'admin/img/pfeil_up.png" title="nach oben" onclick="ajax_action(\'change_order_parent\',\''.$this->table.'\','.$row["id"].',\''.($row["order"] - 1).','.$row["parent"].'\')"/><img style="cursor:pointer;" src="'.$this->base_url.'admin/img/pfeil_down.png" title="nach unten" onclick="ajax_action(\'change_order_parent\',\''.$this->table.'\','.$row["id"].',\''.($row["order"] + 1).','.$row["parent"].'\')"/>'; return $button; } protected function getButton_Copy($row){ if (!$this->permissions->hasPermission($this->permission.".edit") && $_SESSION["_registry"]["section"] != "frontend") return false; $button = '<a href="?edit='.$row["id"].'&e_copy=1"><img src="'.$this->base_url.'admin/img/button_copy.png" title="Kopieren" /></a>'; return $button; } public function getButton_Delete($row){ if (!$this->permissions->hasPermission($this->permission.".del") && $_SESSION["_registry"]["section"] != "frontend") return false; $button = '<img id="delete_button_'.$row["id"].'" src="'.$this->base_url.'admin/img/button_delete.png" title="Löschen" style="cursor:pointer;" /><script type="text/javascript"> $("#delete_button_'.$row["id"].'").click(function() { var r=confirm("'.$this->lang["delete_entry"].'"); if (r==true) ajax_action(\'delete\',\''.$this->table.'\','.$row["id"].'); }); </script>'; return $button; } public function getButton_Status($row){ if (!$this->permissions->hasPermission($this->permission.".edit") && $_SESSION["_registry"]["section"] != "frontend") return false; if (!$row["status"]) $status = 1; else $status = 0; $button = '<img style="cursor:pointer;" src="'.$this->base_url.'admin/img/button_status.png" title="Status" onclick="ajax_action(\'change_status\',\''.$this->table.'\','.$row["id"].','.$status.')"/>'; return $button; } public function getButton_Status3($row){ if (!$this->permissions->hasPermission($this->permission.".edit")) return false; $button = '<div class="status_holder" id="status_holder_'.$row["id"].'" style="width:20px; float:left;"><img src="'.$this->base_url.'admin/img/button_status.png" title="Status" class="status" id="status_'.$row["id"].'" content="#status_box_'.$row["id"].'" /><ul class="status_box" id="status_box_'.$row["id"].'"><li><img title="gesperrt" style="cursor:pointer;" src="'.$this->base_url.'admin/img/kugel_rot.gif" title="inactive" onclick="ajax_action(\'change_status\',\''.$this->table.'\','.$row["id"].',0)"/></li><li><img title="inaktiv" style="cursor:pointer;" src="'.$this->base_url.'admin/img/kugel_gruen.gif" title="active" onclick="ajax_action(\'change_status\',\''.$this->table.'\','.$row["id"].',1)"/></li><li><img title="aktiv" style="cursor:pointer;" src="'.$this->base_url.'admin/img/kugel_gelb.gif" title="wait" onclick="ajax_action(\'change_status\',\''.$this->table.'\','.$row["id"].',2)"/></li></ul></div><script type="text/javascript"> $("#status_'.$row["id"].'").click(function() { $($(this).attr("content")).toggle(); }); </script> '; return $button; } public function getField_Image($field,$entity){ if ($entity[$field[2]] != ""){ $image = new image(); $html = $image->get_thumb($entity[$field[2]]); } return $html; } public function getField_Url($field,$entity){ if ($entity[$field[2]] != ""){ $html = '<a href="'.$entity[$field[2]].'" target="_blank" >'.$entity[$field[2]].'</a>'; } return $html; } public function getField_File($field,$entity){ $FILENAME = $this->base_root."uploads/".$entity[$field[2]]; $val_save = $field[2]; if (!is_file($FILENAME)) { return ""; } $info[]=array("jpg","Image"); $info[]=array("gif","Image"); $info[]=array("png","Image"); $info[]=array("pdf","PDF-File"); $info[]=array("zip","Compressed File"); $info[]=array("htm","HTML-File"); $info[]=array("html","HTML-File"); $info[]=array("doc","Word Document"); $info[]=array("rar","Compressed File"); $info[]=array("txt","Text-File"); $info[]=array("mp3","MP3 Music-file"); $info[]=array("exe","Executable file"); $info[]=array("tar","Tar Compressed file"); $info[]=array("swf","Flash file"); $ext=substr($FILENAME,-3); $ext2=substr($FILENAME,-4); if ($ext2[0]!=".") $ext=$ext2; $ext=strtolower($ext); for ($t=0;$t<count($info);$t++) { if ($ext==$info[$t][0]) { if ($info[$t][1]=="Image") $html .= ' <a href="'.$this->base_url.'uploads/'.$entity[$field[2]].'" rel="shadowbox" title="'.$image[2].'"><img src="'.$this->base_url.'uploads/'.$entity[$field[2]].'" style="width:100px;" /></a>'; else $html .= '<a href="'.$this->base_url.'uploads/'.$entity[$field[2]].'">[download]</a>'; return $html; } } $html .= '<a href="'.$this->base_url.'uploads/'.$entity[$field[2]].'">[download]</a>'; return $html; } public function showEntity($id,$fields,$table = FALSE){ global $FORM_COUNT; if (!$table) $table = $this->table; if (isset($_POST["save_btn".$FORM_COUNT])) $this->saveEntity($id, $fields, $table); if (isset($_POST["saveback".$FORM_COUNT])) { $this->saveEntity($id, $fields, $table); echo '<script>window.location = "'.$_SESSION["_registry"]["variables"]["backlink"].'";</script>';} else if (isset($_POST["reload"])) echo '<script>window.location = "'.$_SESSION["_registry"]["variables"]["backlink"].'";</script>'; else if (isset($_GET["e_copy"])) { $id = $this->copyEntity($id,$fields,$table); } else if (isset($_POST["delete_img".$FORM_COUNT])){ foreach ($_POST["delete_img".$FORM_COUNT] as $image => $even){ $this->delete_image($id,array(2 => $image), $table); } } else if (isset($_POST["delete_file".$FORM_COUNT])){ foreach ($_POST["delete_file".$FORM_COUNT] as $file => $even){ $this->delete_file($id,array(2 => $file), $table); } } else if ($id == "none") $id = $this->newEntity($fields, $table); if ($fields){ $entity = $this->getEntity($id, $fields, $table); $html = '<form enctype="multipart/form-data" action="?edit='.$id.'" method="post" id="edit_form'.$FORM_COUNT.'" name="edit_form'.$FORM_COUNT.'" ><table id="showEntity">'; foreach($fields as $field){ if ($field[0] != "Input") { $call = "getEditField"."_".$field[0]; $fieldData = $this->$call($id,$field,$entity); } else $fieldData = '<input type="text" name="save['.$field[2].']" value=\''.htmlspecialchars ($entity[$field[2]],ENT_QUOTES,"UTF-8").'\' />'; $html .= ' <tr><td>'.$field[1].'</td><td class="entity_field">'.$fieldData.'</td></tr>'; } } $html .= ' <tr><td colspan="2">'; if ($this->permissions->hasPermission($this->permission.".edit")) $html.=' <input type="submit" name="save_btn'.$FORM_COUNT.'" id="button_save'.$FORM_COUNT.'" value="Speichern" class="button" /><input type="submit" name="saveback'.$FORM_COUNT.'" value="Speichern und zurück" class="button" />'; $html .= ' <input type="submit" id="cancel_button" name="cancel" value="Abbrechen" back="'.$_SESSION["_registry"]["variables"]["backlink"].'" class="button" /></td></tr></table></form>'; $FORM_COUNT++; return $html; } public function showEntityStructered($id,$fields,$table = FALSE){ global $FORM_COUNT; if (!$table) $table = $this->table; if (isset($_POST["save".$FORM_COUNT])) foreach ($fields as $field) { $this->saveEntity($id, $field, $table);} if (isset($_POST["saveback".$FORM_COUNT])) { foreach ($fields as $field) {$this->saveEntity($id, $field, $table);} echo '<script>window.location = "'.$_SESSION["_registry"]["variables"][sha1($this->path)]["backlink"].'";</script>';} else if (isset($_POST["reload"])) echo '<script>window.location = "'.$_SESSION["_registry"]["variables"][sha1($this->path)]["backlink"].'";</script>'; else if (isset($_POST["save_action"]) && $_POST["save_action"] == "delete" || isset($_GET["delete"])) { $this->deleteEntity($id, $fields, $table ); echo '<script>window.location = "'.$_SESSION["_registry"]["variables"][sha1($this->path)]["backlink"].'";</script>'; } else if (isset($_GET["status_change"])) { $this->statusEntity($id,$_GET["status"],$table); echo '<script>window.location = "'.$_SESSION["_registry"]["variables"][sha1($this->path)]["backlink"].'";</script>'; } else if (isset($_GET["copy"])) { $id = $this->copyEntity($id,$table); } else if (isset($_POST["delete_mass"])) { if (isset($_POST["marked"])){ foreach ($_POST["marked"] as $id){ $this->deleteEntity($id, $fields, $table); } } echo '<script>window.location = "'.$_SESSION["_registry"]["variables"][sha1($this->path)]["backlink"].'";</script>'; } else if (isset($_POST["delete_img".$FORM_COUNT])){ foreach ($_POST["delete_img".$FORM_COUNT] as $image => $even){ $this->delete_image($id,array(2 => $image), $table); } } else if (isset($_POST["delete_file".$FORM_COUNT])){ foreach ($_POST["delete_file".$FORM_COUNT] as $file => $even){ $this->delete_file($id,array(2 => $file), $table); } } else if ($id == "none") $id = $this->newEntity($fields, $table); if ($fields){ $html = ' <form enctype="multipart/form-data" action="?edit='.$id.'" method="post" id="edit_form'.$FORM_COUNT.'" name="edit_form'.$FORM_COUNT.'" ><table id="showEntity">'; $fieldlist = $fields; $html .= ' <tr><th colspan="10">'.$name.'</th></tr>'; foreach ($fieldlist as $fields){ $entity = $this->getEntity($id, $fields, $table); $html .= ' <tr>'; foreach($fields as $field){ if ($field[0] != "Input") { $call = "getEditField"."_".$field[0]; $fieldData = $this->$call($id,$field,$entity); } else $fieldData = '<input type="text" name="save['.$field[2].']" value="'.$entity[$field[2]].'" />'; if ($field[0] != "Hidden") $html .= ' <td>'.$field[1].'</td><td class="entity_field">'.$fieldData.'</td>'; else $html .= $fieldData; } $html .= ' </tr>'; } } $html .= ' <tr><td colspan="10"><input type="image" src="'.$this->base_url.'admin/img/button_save_de.png" name="save'.$FORM_COUNT.'" value="" id="button_save'.$FORM_COUNT.'" /><input type="image" src="'.$this->base_url.'admin/img/button_saveback_de.png" name="saveback'.$FORM_COUNT.'" value="" /><a href="'.$_SESSION["_registry"]["variables"][sha1($this->path)]["backlink"].'"><img src="'.$this->base_url.'admin/img/button_cancel_de.png" /></a></td></tr></table></form>'; $FORM_COUNT++; return $html; } public function getEntity($id,$fields,$table = FALSE){ if (!$table) $table = $this->table; $query = "SELECT `id`"; if ($fields){ foreach($fields as $field){ if ($field[0] == "DateRange" || $field[0] == "DateRangeBig") $query .= ", `".$field[2]."`, `".$field[3]."`"; else if ($field[0] == "Hidden") $query .= ", `".$field[1]."`"; else if ($field[0] == "BoolSelectRelation" || $field[0] == "OrderedBoolSelectRelation" || $field[0] == "InputsRelation") $query .= ""; else $query .= ", `".$field[2]."`"; } } $query .= " FROM `".$table."` WHERE id=".$id.";"; return $this->db->query_fetch($query); } public function copyEntity($id,$fields,$table = FALSE){ if (!$table) $table = $this->table; $query = "SELECT * FROM `".$table."` WHERE id=".$id.";"; $old_entity = $this->db->query_fetch($query); unset($old_entity["id"]); unset($old_entity["update"]); unset($old_entity["editor"]); if (!$table) $table = $this->table; $bool_selects = array(); foreach ($fields as $field){ if($field[0] == "Image"){ $image_cl = new image(); if($image_cl->is_set($old_entity[$field[2]])){ $ext = $image_cl->get_ext($old_entity[$field[2]]); $time = microtime(true) * 100 ; $image_array_tmp = unserialize($old_entity[$field[2]]); $this->ftp->changeDir($_SESSION["_registry"]["ftp_config"]["self"]["root"]); $this->ftp->chmod("uploads",0777); copy($this->base_root."uploads/".$image_array_tmp[0] , $this->base_root."uploads/".$time.$ext); copy($this->base_root."uploads/".$image_array_tmp[1] , $this->base_root."uploads/".$time."_thumb".$ext); $image_array_tmp[0] = $time.$ext; $image_array_tmp[1] = $time."_thumb".$ext; $old_entity[$field[2]] = serialize($image_array_tmp); $this->ftp->chmod("uploads",0755); unset ($image_array_tmp); unset ($ext); unset ($time); } } else if($field[0] == "File"){ if($old_entity[$field[2]]){ $ext=substr($old_entity[$field[2]] ,-3); $ext2=substr($old_entity[$field[2]] ,-4); if ($ext2[0]!=".") $ext=$ext2; $ext = ".".$ext; $ext=strtolower($ext); $time = microtime(true) * 100 ; $this->ftp->changeDir($_SESSION["_registry"]["ftp_config"]["self"]["root"]); $this->ftp->chmod("uploads",0777); copy($this->base_root."uploads/".$old_entity[$field[2]] , $this->base_root."uploads/".$time.$ext); $old_entity[$field[2]] = $time.$ext; $this->ftp->chmod("uploads",0755); unset ($ext); unset ($time); } } else if($field[0] == "BoolSelectRelation" || $field[0] == "InputsRelation"){ $bool_selects[] = $field; } } $query = "INSERT INTO ".$table." ( `id` , `update` , `editor`"; foreach ($old_entity as $field => $value){ $query .= " ,
                    `$field`"; if ($field == "order") $old_entity[$field] = $this->db->get_max($field,$table) + 1; } $query .= " )VALUES ( NULL , NULL , '".$_SESSION["_registry"]["user"]["name"]."'"; foreach ($old_entity as $field => $value){ $query .= " , '".$value."'"; } $query .= " ); "; $new_id = $this->db->lastindex_query($query); foreach ($bool_selects as $select){ $old_selects = $this->db->select("SELECT * FROM ".$select[2]." WHERE ".$select[4]." = ".$id." ;"); foreach ($old_selects as $new_select){ if(isset($new_select["value"])){ $this->db->query("INSERT INTO ".$select[2]." (`".$select[3]."`, `".$select[4]."`,`value`) VALUES (".$new_select[$select[3]].",".$new_id.",'".$new_select["value"]."');"); } else{ $this->db->query("INSERT INTO ".$select[2]." (`".$select[3]."`, `".$select[4]."`) VALUES (".$new_select[$select[3]].",".$new_id.");"); } } } return $new_id; } public function saveEntity($id, $fields=FALSE, $table = FALSE){ if (!$table) $table = $this->table; $querys = 0; $query = "UPDATE ".$table." SET "; if ($fields){ $first = TRUE; foreach($fields as $field){ if ($field[0] == "Image"){ $image = $this->save_image($id,$field, $table); if ($image){if (!$first) $query .= ", "; $query .= "`".$field[2]."` = '".$image."'";} $querys ++; } else if($field[0] == "File"){ $file = $this->save_file($id,$field, $table); if ($file){if (!$first) $query .= ", "; $query .= "`".$field[2]."` = '".$file."'";} $querys ++; } else if($field[0] == "DateRange" || $field[0] == "DateRangeBig"){ if (!$first) $query .= ", "; $query .= "`".$field[2]."` = '".$_POST["save"][$field[2]]."', `".$field[3]."` = '".$_POST["save"][$field[3]]."'"; $querys ++; } else if($field[0] == "HTML" || $field[0] == "HTMLMin"){ if (!$first) $query .= ", "; $query .= "`".$field[2]."` = '".$_POST["save"][$field[2]]."'"; $querys ++; } else if($field[0] == "BoolSelect"){ if (!$first) $query .= ", "; $query .= "`".$field[2]."` = '".serialize($_POST["save"][$field[2]])."'"; $querys ++; } else if($field[0] == "BoolSelectRelation"){ $this->db->query("DELETE FROM ".$field[2]." WHERE ".$field[4]." = $id ;"); foreach($_POST["save"][$field[1]] as $item_id){ $sub_query = "INSERT INTO `".$field[2]."` ( `".$field[3]."` , `".$field[4]."` 
                                )
                                VALUES (
                                    '$item_id', '$id'
                                );"; $this->db->query($sub_query); } } else if($field[0] == "OrderedBoolSelectRelation"){ $this->db->query("DELETE FROM ".$field[2]." WHERE ".$field[4]." = $id ;"); foreach($_POST["save"][$field[1]] as $item_id){ $sub_query = "INSERT INTO `".$field[2]."` ( `".$field[3]."` , `".$field[4]."` ,
                                                                        `order`
                                )
                                VALUES (
                                    '$item_id', '$id', '".$_POST["order"][$field[1]][$item_id]."' );"; $this->db->query($sub_query); } } else { if (!$first) $query .= ", "; $query .= "`".$field[2]."` = '".$_POST["save"][$field[2]]."'"; $querys ++; } $first = FALSE; } } $query .= ' WHERE id='.$id.' LIMIT 1;'; if ($querys) return $this->db->query($query); else return true; } public function save_image($id,$field, $table){ if (!is_dir($this->base_root."admin/tmp")) { $this->ftp->changeDir($_SESSION["_registry"]["ftp_config"]["self"]["root"]."admin/"); $this->ftp->makeDir("tmp"); $this->ftp->chmod("tmp",0777); } if ($_FILES['save']['tmp_name'][$field[2]] != ""){ if(preg_match("/image/i", $_FILES['save']['type'][$field[2]])){ if(preg_match('/(jpg|jpeg)$/i', $_FILES['save']['type'][$field[2]])){ $ext = ".jpg"; $type = ImageEditor::JPG; } elseif(preg_match('/(png)$/i', $_FILES['save']['type'][$field[2]])){ $ext = ".png"; $type = ImageEditor::PNG; } elseif(preg_match('/(gif)$/i', $_FILES['save']['type'][$field[2]])){ $ext = ".gif"; $type = ImageEditor::GIF; } $time = microtime(true) * 100 ; move_uploaded_file($_FILES['save']['tmp_name'][$field[2]],$this->base_root."admin/tmp/".$time.$ext); $image_tmp = new ImageEditor(); $image_tmp->loadImageFile($this->base_root."admin/tmp/".$time.$ext); $image = new ImageEditor(); if ($field[3] && $field[4]){ $image->createCanvas($field[3], $field[4]); $image->fillin($image_tmp); } else $image = $image_tmp; $image->writeImageFile( $this->base_root."admin/tmp/".$time.".tmp",$type); $thumb = new ImageEditor(); if ($field[5] && $field[6]){ $thumb->createCanvas($field[5], $field[6]); $thumb->fillin($image_tmp); } else { $thumb->createCanvas(100, 100); $thumb->fillin($image_tmp); } $thumb->writeImageFile( $this->base_root."admin/tmp/".$time."_thumb.tmp",$type); $this->ftp->changeDir($_SESSION["_registry"]["ftp_config"]["self"]["root"]."uploads/"); $this->ftp->upload($this->base_root."admin/tmp/".$time.".tmp", $time.$ext, 'auto', 0 ); $this->ftp->upload($this->base_root."admin/tmp/".$time."_thumb.tmp", $time."_thumb".$ext, 'auto', 0 ); $this->ftp->changeDir($_SESSION["_registry"]["ftp_config"]["self"]["root"]."admin/"); $this->ftp->removeDir("tmp","1"); $query = "SELECT ".$field[2]." FROM ".$table." WHERE id=".$id." LIMIT 1"; $old_img = unserialize($this->db->query_fetch_single($query)); $this->ftp->changeDir($_SESSION["_registry"]["ftp_config"]["self"]["root"]."uploads/"); if (is_file($this->base_root."uploads/".$old_img[0])) $this->ftp->delete($old_img[0]); if (is_file($this->base_root."uploads/".$old_img[1])) $this->ftp->delete($old_img[1]); return serialize(array($time.$ext,$time."_thumb".$ext,$_POST["image"][$field[2]])); } else{ $query = "SELECT ".$field[2]." FROM ".$table." WHERE id=".$id." LIMIT 1"; $old_img = unserialize($this->db->query_fetch_single($query)); return serialize(array($old_img[0],$old_img[1],$_POST["image"][$field[2]])); } } else{ $query = "SELECT ".$field[2]." FROM ".$table." WHERE id=".$id." LIMIT 1"; $old_img = unserialize($this->db->query_fetch_single($query)); return serialize(array($old_img[0],$old_img[1],$_POST["image"][$field[2]])); } } public function save_file($id,$field, $table){ if (!is_dir($this->base_root."admin/tmp")) { $this->ftp->changeDir($_SESSION["_registry"]["ftp_config"]["self"]["root"]."admin/"); $this->ftp->makeDir("tmp"); $this->ftp->chmod("tmp",0777); } if ($_FILES['save']['tmp_name'][$field[2]] != ""){ $ext=substr($_FILES['save']['name'][$field[2]] ,-3); $ext2=substr($_FILES['save']['name'][$field[2]] ,-4); if ($ext2[0]!=".") $ext=$ext2; $ext = ".".$ext; $ext=strtolower($ext); $time = microtime(true) * 100; move_uploaded_file($_FILES['save']['tmp_name'][$field[2]],$this->base_root."admin/tmp/".$time.".tmp"); $this->ftp->changeDir($_SESSION["_registry"]["ftp_config"]["self"]["root"]."uploads/"); $this->ftp->upload($this->base_root."admin/tmp/".$time.".tmp", $time.$ext, 'auto', 0 ); $this->ftp->changeDir($_SESSION["_registry"]["ftp_config"]["self"]["root"]."admin/"); $this->ftp->removeDir("tmp",1); $old_file = $this->db->query_fetch_single("SELECT ".$field[2]." FROM ".$table." WHERE id=".$id." LIMIT 1;"); $this->ftp->changeDir($_SESSION["_registry"]["ftp_config"]["self"]["root"]."uploads/"); if (is_file($this->base_root."uploads/".$old_img[0])) $this->ftp->delete($old_file); return $time.$ext; } } public function delete_image($id,$field, $table){ $query = "SELECT ".$field[2]." FROM ".$table." WHERE id=".$id." LIMIT 1"; $old_img = unserialize($this->db->query_fetch_single($query)); $this->ftp->changeDir($_SESSION["_registry"]["ftp_config"]["self"]["root"]."uploads/"); if (is_file($this->base_root."uploads/".$old_img[0])) $this->ftp->delete($old_img[0]); if (is_file($this->base_root."uploads/".$old_img[1])) $this->ftp->delete($old_img[1]); $this->db->query ("UPDATE ".$table." SET ".$field[2]." = '' WHERE id = ".$id.";"); } public function delete_file($id,$field, $table){ $old_file = $this->db->query_fetch_single("SELECT ".$field[2]." FROM ".$table." WHERE id=".$id." LIMIT 1;"); $this->ftp->changeDir($_SESSION["_registry"]["ftp_config"]["self"]["root"]."uploads/"); if (is_file($this->base_root."uploads/".$old_file)) $this->ftp->delete($old_file); $this->db->query ("UPDATE ".$table." SET ".$field[2]." = '' WHERE id = ".$id.";"); } public function newEntity($fields=FALSE, $table = FALSE){ if (!$table) $table = $this->table; $query = "INSERT INTO ".$table." ( `id` , `update` , `editor`"; if ($this->db->is_field('order', $table)){ $order = ", '".($this->db->get_max('order', $table) + 1)."'"; $query .= " , `order`"; } $query .= ")VALUES ( NULL , NOW( ) , '".$_SESSION["_registry"]["user"]["name"]."'".$order." ); "; return $this->db->lastindex_query($query); } public function getEditField_DateRangeBig($id,$field,$entity){ if (!isset($field[4])) $format = FALSE; else $format = $field[4]; if ($entity[$field[2]] != "0000-00-00") $from = $this->time->convertDate($entity[$field[2]],$format); if ($entity[$field[3]] != "0000-00-00") $till = $this->time->convertDate($entity[$field[3]],$format); $html = '<input type="hidden" name="save['.$field[2].']" value="'.$entity[$field[2]].'" id="hidden_'.$field[2].'"/><input type="hidden" name="save['.$field[3].']" value="'.$entity[$field[3]].'" id="hidden_'.$field[3].'"/><input type="text" id="show'.$field[2].'" value="'.$from.'" /></td><td> - </td><td><input type="text" id="show'.$field[3].'" value="'.$till.'" /><script> $(function() { var dates = $( "#show'.$field[2].', #show'.$field[3].'" ).datepicker({ defaultDate: "", minDate: "", changeMonth: true, numberOfMonths: 1, onSelect: function( selectedDate ) { var option = this.id == "show'.$field[2].'" ? "minDate" : "maxDate", instance = $( this ).data( "datepicker" ), date = $.datepicker.parseDate( instance.settings.dateFormat || $.datepicker._defaults.dateFormat, selectedDate, instance.settings ); dates.not( this ).datepicker( "option", option, date ); $("#show'.$field[2].'").datepicker( "option", "altField", "#hidden_'.$field[2].'" ); $("#show'.$field[2].'").datepicker( "option", "dateFormat", "'.$this->time->getFormat_calendar().'" ); $("#show'.$field[2].'").datepicker( "option", "altFormat", "yy-mm-dd" ); $("#show'.$field[3].'").datepicker( "option", "altField", "#hidden_'.$field[3].'" ); $("#show'.$field[3].'").datepicker( "option", "dateFormat", "'.$this->time->getFormat_calendar().'" ); $("#show'.$field[3].'").datepicker( "option", "altFormat", "yy-mm-dd" ); } }); }); </script>'; return $html; } public function getEditField_OrderedBoolSelectRelation($id,$field,$entity){ $items = $this->db->select("SELECT ".$field[3].", ".$field[4].", `order` FROM ".$field[2]." WHERE ".$field[4]." = $id ORDER BY `order`;",MYSQLI_ASSOC,FALSE,$field[3]); $query = "SELECT id, ".$field[5]." FROM ".$field[6].";"; $selects = $this->db->select($query,MYSQLI_ASSOC, FALSE); $html = "<table>"; foreach ($selects as $select){ $html .= '<tr><td><input type="checkbox" class="small_input" name="save['.$field[1].']['.$select["id"].']" value="'.$select["id"].'" '; if (isset($items[$select["id"]][$field[4]])) $html .= 'checked="checked"'; $html .= '>'.$select[$field[5]].'</input></td><td><input type="text" name="order['.$field[1].']['.$select["id"].']" value="'.$items[$select["id"]]["order"].'" style="width:20px;"/></td></tr>'; } $html .= '</table>'; return $html; } public function getEditField_Hidden($id,$field,$entity){ $html = '<input type="hidden" name="save['.$field[1].']" value="'.$field[2].'" />'; return $html; } public function getEditField_Html($id,$field,$entity){ $html = ' <textarea id="text_'.$field[2].'" name="save['.$field[2].']">'.$entity[$field[2]].'</textarea><script type="text/javascript"> var hb_full_'.$field[2].' = $("#text_'.$field[2].'").htmlbox({ toolbars:[ [ "separator","cut","copy","paste", "separator","undo","redo", "separator","bold","italic","underline","strike","sup","sub", "separator","justify","left","center","right", "separator","ol","ul","indent","outdent", "separator","link","unlink","image" ], [ "separator","code", "separator","formats","fontsize","fontfamily", "separator","fontcolor","highlight", ], [ "separator","removeformat","striptags","hr","paragraph", "separator","quote","styles","syntax" ] ], idir:"'.$this->base_url.'admin/js/HtmlBox/images", limit:'.$field[3].', skin:"blue", about: false }); </script> '; return $html; } public function getEditField_HtmlMin($id,$field,$entity){ $html = ' <textarea id="text_'.$field[2].'" name="save['.$field[2].']">'.$entity[$field[2]].'</textarea><script type="text/javascript"> var hb_min_'.$field[2].' = $("#text_'.$field[2].'").htmlbox({ toolbars:[ [ "separator","bold","italic","underline","strike","sup","sub", "separator","justify","left","center","right", "separator","removeformat", "separator","link","unlink" ] ], idir:"'.$this->base_url.'admin/js/HtmlBox/images", limit:'.$field[3].', skin:"blue", about: false }); </script> '; return $html; } public function getEditField_Text($id,$field,$entity){ $html = '<textarea name="save['.$field[2].']" cols="50" rows="10">'.$entity[$field[2]].'</textarea>'; return $html; } public function getEditField_Select($id,$field,$entity){ $html = '<select name="save['.$field[2].']" id="'.$field[2].'">'; foreach ($field[3] as $key => $select){ $html .= '<option value="'.$key.'"'; if ($entity[$field[2]] == $key) $html .=' selected="selected"'; $html .='>'.$select.'</option>'; } $html .= '</select>'; return $html; } public function getEditField_TableSelect($id,$field,$entity){ $query = "SELECT id, ".$field[3]." FROM ".$field[4].";"; $selects = $this->db->select($query,MYSQLI_ASSOC, FALSE); $html = '<select name="save['.$field[2].']" id="'.$field[2].'"><option value="">None</option>'; foreach ($selects as $select){ $html .= '<option value="'.$select[$field[5]].'" '; if ($entity[$field[2]] == $select[$field[5]]) $html .= 'selected="selected"'; $html .= '>'.$select[$field[3]].'</option>'; } $html .= '</select>'; if ($field[6]) $html .= ' <script> $( "#'.$field[2].'" ).change(function() { $("#edit_form").submit(); }); </script>'; return $html; } public function getEditField_TableSelectFilter($id,$field,$entity){ $query = "SELECT id, ".$field[3]." FROM ".$field[4]." WHERE $field[6];"; $selects = $this->db->select($query,MYSQLI_ASSOC, FALSE); $html = '<select name="save['.$field[2].']" id="'.$field[2].'"><option value="">None</option>'; foreach ($selects as $select){ $html .= '<option value="'.$select[$field[5]].'" '; if ($entity[$field[2]] == $select[$field[5]]) $html .= 'selected="selected"'; $html .= '>'.$select[$field[3]].'</option>'; } $html .= '</select>'; if ($field[7]) $html .= ' <script> $( "#'.$field[2].'" ).change(function() { $("#edit_form").submit(); }); </script>'; return $html; } public function getEditField_TableSelectWhere($id,$field,$entity){ $query = "SELECT id, ".$field[3]." FROM ".$field[4]." WHERE ".$field[6][0]." ".$field[6][1]." '".$entity[$field[6][2]]."';"; $selects = $this->db->select($query,MYSQLI_ASSOC, FALSE); $html = '<select name="save['.$field[2].']" id="'.$field[2].'"><option value="">None</option>'; foreach ($selects as $select){ $html .= '<option value="'.$select[$field[5]].'" '; if ($entity[$field[2]] == $select[$field[5]]) $html .= 'selected="selected"'; $html .= '>'.$select[$field[3]].'</option>'; } $html .= '</select>'; if ($field[7]) $html .= ' <script> $( "#'.$field[2].'" ).change(function() { $("#edit_form").submit(); }); </script>'; return $html; } public function getEditField_Date($id,$field,$entity){ if (!isset($field[3])) $format = FALSE; else $format = $field[3]; if ($entity[$field[2]] != "0000-00-00") $date = $this->time->convertDate($entity[$field[2]],$format); $html = '<input type="hidden" name=save['.$field[2].']" value="'.$entity[$field[2]].'" id="hidden_'.$field[2].'"/><input type="text" id="show'.$field[2].'" value="'.$date.'" /><script> $(function() { $( "#show'.$field[2].'" ).datepicker({ dateFormat: "'.$this->time->getFormat_calendar().'", altField: "#hidden_'.$field[2].'", altFormat: "yy-mm-dd" }); }); </script>'; return $html; } public function getEditField_DateRange($id,$field,$entity){ if (!isset($field[4])) $format = FALSE; else $format = $field[4]; if ($entity[$field[2]] != "0000-00-00") $from = $this->time->convertDate($entity[$field[2]],$format); if ($entity[$field[3]] != "0000-00-00") $till = $this->time->convertDate($entity[$field[3]],$format); $html = '<input type="hidden" name="save['.$field[2].']" value="'.$entity[$field[2]].'" id="hidden_'.$field[2].'"/><input type="hidden" name="save['.$field[3].']" value="'.$entity[$field[3]].'" id="hidden_'.$field[3].'"/><input type="text" id="show'.$field[2].'" value="'.$from.'" /> - <input type="text" id="show'.$field[3].'" value="'.$till.'" /><script> $(function() { var dates = $( "#show'.$field[2].', #show'.$field[3].'" ).datepicker({ defaultDate: "", minDate: "", changeMonth: true, numberOfMonths: 1, onSelect: function( selectedDate ) { var option = this.id == "show'.$field[2].'" ? "minDate" : "maxDate", instance = $( this ).data( "datepicker" ), date = $.datepicker.parseDate( instance.settings.dateFormat || $.datepicker._defaults.dateFormat, selectedDate, instance.settings ); dates.not( this ).datepicker( "option", option, date ); $("#show'.$field[2].'").datepicker( "option", "altField", "#hidden_'.$field[2].'" ); $("#show'.$field[2].'").datepicker( "option", "dateFormat", "'.$this->time->getFormat_calendar().'" ); $("#show'.$field[2].'").datepicker( "option", "altFormat", "yy-mm-dd" ); $("#show'.$field[3].'").datepicker( "option", "altField", "#hidden_'.$field[3].'" ); $("#show'.$field[3].'").datepicker( "option", "dateFormat", "'.$this->time->getFormat_calendar().'" ); $("#show'.$field[3].'").datepicker( "option", "altFormat", "yy-mm-dd" ); } }); }); </script>'; return $html; } public function getEditField_Image($id,$field,$entity){ global $FORM_COUNT; $image = new image(); if (!$image->is_set($entity[$field[2]])) $html = ' <input type="file" name="save['.$field[2].']" /></td></tr><tr><td> '.$this->lang["image_alt"].' ('.$field[1].')</td><td><input type="input" name="image['.$field[2].']" />'; else{ $html = $image->get_thumb($entity[$field[2]]); $html .= '<br /><input type="file" name="save['.$field[2].']" /><input type="submit" name="delete_img'.$FORM_COUNT.'['.$field[2].']" value="delete" /></td></tr><tr><td> '.$this->lang["image_alt"].' ('.$field[1].')</td><td><input type="input" name="image['.$field[2].']" value="'.$image->get_alt($entity[$field[2]]).'" />'; } return $html; } public function getEditField_Bool($id,$field,$entity){ $html = '<input type="checkbox" class="small_input" name="save['.$field[2].']" value="1" '; if ($entity[$field[2]]) $html .= 'checked="checked" '; $html .= "/>"; return $html; } public function getEditField_Colorpicker($id,$field,$entity){ $html .= '<input type="hidden" maxlength="6" size="6" id="'.$field[2].'" value="'.$entity[$field[2]].'" name="save['.$field[2].']" /><div id="colorSelector_'.$field[2].'"><div style="background-color: #'.$entity[$field[2]].'; width:25px; height:25px; border: 1px solid black;"></div></div><script> $(\'#colorSelector_'.$field[2].'\').ColorPicker({ color: \'#'.$entity[$field[2]].'\', onShow: function (colpkr) { $(colpkr).fadeIn(500); return false; }, onHide: function (colpkr) { $(colpkr).fadeOut(500); return false; }, onChange: function (hsb, hex, rgb) { $("#'.$field[2].'").val(hex); $("#colorSelector_'.$field[2].' div").css("backgroundColor", "#" + hex); } }); </script>'; return $html; } public function getEditField_BoolSelect($id,$field,$entity){ $query = "SELECT id, ".$field[3]." FROM ".$field[4].";"; $selects = $this->db->select($query,MYSQLI_ASSOC, FALSE); $items = unserialize($entity[$field[2]]); foreach ($selects as $select){ $html .= '<input type="checkbox" class="small_input" name="save['.$field[2].']['.$select["id"].']" value="1" '; if ($items[$select["id"]] == 1) $html .= 'checked="checked"'; $html .= '>'.$select[$field[3]].'</input><br>'; } return $html; } public function getEditField_BoolSelectRelation($id,$field,$entity){ $items = $this->db->select_pair ($field[2],$field[3],$field[4],FALSE,FALSE, $field[4]."=$id" ); $query = "SELECT id, ".$field[5]." FROM ".$field[6].";"; $selects = $this->db->select($query,MYSQLI_ASSOC, FALSE); foreach ($selects as $select){ $html .= '<input type="checkbox" class="small_input" name="save['.$field[1].']['.$select["id"].']" value="'.$select["id"].'" '; if (isset($items[$select["id"]])) $html .= 'checked="checked"'; $html .= '>'.$select[$field[5]].'</input><br>'; } return $html; } public function getEditField_Info($id,$field,$entity){ $html = '<input type="text" readonly="readonly" name="save['.$field[2].']" value="'.$entity[$field[2]].'" />'; return $html; } public function getEditField_File($id,$field,$entity){ $FILENAME = $this->base_root."uploads/".$entity[$field[2]]; $val_save = $field[2]; if (!is_file($FILENAME)) { $html = '<input type="file" name="save['.$val_save.']">'; return $html; } $info[]=array("jpg","Image"); $info[]=array("gif","Image"); $info[]=array("png","Image"); $info[]=array("pdf","PDF-File"); $info[]=array("zip","Compressed File"); $info[]=array("htm","HTML-File"); $info[]=array("html","HTML-File"); $info[]=array("doc","Word Document"); $info[]=array("rar","Compressed File"); $info[]=array("txt","Text-File"); $info[]=array("mp3","MP3 Music-file"); $info[]=array("exe","Executable file"); $info[]=array("tar","Tar Compressed file"); $info[]=array("swf","Flash file"); $ext=substr($FILENAME,-3); $ext2=substr($FILENAME,-4); if ($ext2[0]!=".") $ext=$ext2; $ext=strtolower($ext); for ($t=0;$t<count($info);$t++) { if ($ext==$info[$t][0]) { $html .= $info[$t][0].' - '.$info[$t][1]; if ($info[$t][1]=="Image") { $image = new ImageEditor(); $image->loadImageFile($FILENAME); $fsize=filesize($FILENAME); $units="Bytes"; if ($fsize>1024) { $units="KBytes"; $fsize=round(($fsize/1024)*100)/100; } if ($fsize>1024) { $units="MBytes"; $fsize=round(($fsize/1024)*100)/100; } $html .= '&nbsp;&nbsp;Gr&ouml;&szlig;e: '.$image->width.'x'.$image->height.' ('.$fsize.' '.$units.')<br/>'; $html .= ' <a href="'.$this->base_url.'uploads/'.$entity[$field[2]].'" rel="shadowbox"><img src="'.$this->base_url.'uploads/'.$entity[$field[2]].'" style="width:200px;" /></a><br><input type="submit" name="delete_file'.$FORM_COUNT.'['.$field[2].']" value="delete" />'; } else { $fsize=filesize($FILENAME); $units="Bytes"; if ($fsize>1000) { $units="KBytes"; $fsize=round(($fsize/1024)*100)/100; } if ($fsize>1000) { $units="MBytes"; $fsize=round(($fsize/1024)*100)/100; } $html .= '&nbsp;&nbsp;Gr&ouml;&szlig;e: '.$fsize.' '.$units.'<br>'; $html .= '<a href="'.$this->base_url.'uploads/'.$entity[$field[2]].'">[download]</a><br><input type="submit" name="delete_file'.$FORM_COUNT.'['.$field[2].']" value="delete" />'; } return $html; } } $html .= '*.'.$ext.' - unbekannter Dateityp'; $fsize=filesize($FILENAME); $units="Bytes"; if ($fsize>1000) { $units="KBytes"; $fsize=round(($fsize/1024)*100)/100; } if ($fsize>1000) { $units="MBytes"; $fsize=round(($fsize/1024)*100)/100; } $html .= '&nbsp;&nbsp;Gr&ouml;&szlig;e: '.$fsize.' '.$units.'<br>'; $html .= '<a href="'.$this->base_url.'uploads/'.$entity[$field[2]].'">[download]</a><br><input type="submit" name="delete_file'.$FORM_COUNT.'['.$field[2].']" value="delete" />'; return $html; } } 
?>